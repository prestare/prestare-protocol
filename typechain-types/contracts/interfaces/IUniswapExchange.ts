/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IUniswapExchangeInterface extends utils.Interface {
  functions: {};

  events: {
    "AddLiquidity(address,uint256,uint256)": EventFragment;
    "EthPurchase(address,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256)": EventFragment;
    "TokenPurchase(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPurchase"): EventFragment;
}

export interface AddLiquidityEventObject {
  provider: string;
  eth_amount: BigNumber;
  token_amount: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface EthPurchaseEventObject {
  buyer: string;
  tokens_sold: BigNumber;
  eth_bought: BigNumber;
}
export type EthPurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EthPurchaseEventObject
>;

export type EthPurchaseEventFilter = TypedEventFilter<EthPurchaseEvent>;

export interface RemoveLiquidityEventObject {
  provider: string;
  eth_amount: BigNumber;
  token_amount: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface TokenPurchaseEventObject {
  buyer: string;
  eth_sold: BigNumber;
  tokens_bought: BigNumber;
}
export type TokenPurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenPurchaseEventObject
>;

export type TokenPurchaseEventFilter = TypedEventFilter<TokenPurchaseEvent>;

export interface IUniswapExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddLiquidity(address,uint256,uint256)"(
      provider?: PromiseOrValue<string> | null,
      eth_amount?: PromiseOrValue<BigNumberish> | null,
      token_amount?: PromiseOrValue<BigNumberish> | null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      provider?: PromiseOrValue<string> | null,
      eth_amount?: PromiseOrValue<BigNumberish> | null,
      token_amount?: PromiseOrValue<BigNumberish> | null
    ): AddLiquidityEventFilter;

    "EthPurchase(address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      tokens_sold?: PromiseOrValue<BigNumberish> | null,
      eth_bought?: PromiseOrValue<BigNumberish> | null
    ): EthPurchaseEventFilter;
    EthPurchase(
      buyer?: PromiseOrValue<string> | null,
      tokens_sold?: PromiseOrValue<BigNumberish> | null,
      eth_bought?: PromiseOrValue<BigNumberish> | null
    ): EthPurchaseEventFilter;

    "RemoveLiquidity(address,uint256,uint256)"(
      provider?: PromiseOrValue<string> | null,
      eth_amount?: PromiseOrValue<BigNumberish> | null,
      token_amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      provider?: PromiseOrValue<string> | null,
      eth_amount?: PromiseOrValue<BigNumberish> | null,
      token_amount?: PromiseOrValue<BigNumberish> | null
    ): RemoveLiquidityEventFilter;

    "TokenPurchase(address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      eth_sold?: PromiseOrValue<BigNumberish> | null,
      tokens_bought?: PromiseOrValue<BigNumberish> | null
    ): TokenPurchaseEventFilter;
    TokenPurchase(
      buyer?: PromiseOrValue<string> | null,
      eth_sold?: PromiseOrValue<BigNumberish> | null,
      tokens_bought?: PromiseOrValue<BigNumberish> | null
    ): TokenPurchaseEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
