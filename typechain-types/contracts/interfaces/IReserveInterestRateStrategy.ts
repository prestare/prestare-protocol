/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IReserveInterestRateStrategyInterface extends utils.Interface {
  functions: {
    "baseVariableBorrowRate()": FunctionFragment;
    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getMaxVariableBorrowRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseVariableBorrowRate"
      | "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"
      | "getMaxVariableBorrowRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "baseVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVariableBorrowRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "baseVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVariableBorrowRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IReserveInterestRateStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReserveInterestRateStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      aToken: PromiseOrValue<string>,
      liquidityAdded: PromiseOrValue<BigNumberish>,
      liquidityTaken: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityRate: BigNumber;
        stableBorrowRate: BigNumber;
        variableBorrowRate: BigNumber;
      }
    >;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
    reserve: PromiseOrValue<string>,
    aToken: PromiseOrValue<string>,
    liquidityAdded: PromiseOrValue<BigNumberish>,
    liquidityTaken: PromiseOrValue<BigNumberish>,
    totalStableDebt: PromiseOrValue<BigNumberish>,
    totalVariableDebt: PromiseOrValue<BigNumberish>,
    averageStableBorrowRate: PromiseOrValue<BigNumberish>,
    reserveFactor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidityRate: BigNumber;
      stableBorrowRate: BigNumber;
      variableBorrowRate: BigNumber;
    }
  >;

  "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
    reserve: PromiseOrValue<string>,
    availableLiquidity: PromiseOrValue<BigNumberish>,
    totalStableDebt: PromiseOrValue<BigNumberish>,
    totalVariableDebt: PromiseOrValue<BigNumberish>,
    averageStableBorrowRate: PromiseOrValue<BigNumberish>,
    reserveFactor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      aToken: PromiseOrValue<string>,
      liquidityAdded: PromiseOrValue<BigNumberish>,
      liquidityTaken: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidityRate: BigNumber;
        stableBorrowRate: BigNumber;
        variableBorrowRate: BigNumber;
      }
    >;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      aToken: PromiseOrValue<string>,
      liquidityAdded: PromiseOrValue<BigNumberish>,
      liquidityTaken: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      aToken: PromiseOrValue<string>,
      liquidityAdded: PromiseOrValue<BigNumberish>,
      liquidityTaken: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: PromiseOrValue<string>,
      availableLiquidity: PromiseOrValue<BigNumberish>,
      totalStableDebt: PromiseOrValue<BigNumberish>,
      totalVariableDebt: PromiseOrValue<BigNumberish>,
      averageStableBorrowRate: PromiseOrValue<BigNumberish>,
      reserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
