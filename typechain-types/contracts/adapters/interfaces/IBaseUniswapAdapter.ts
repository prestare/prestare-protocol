/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IBaseUniswapAdapterInterface extends utils.Interface {
  functions: {
    "FLASHLOAN_PREMIUM_TOTAL()": FunctionFragment;
    "MAX_SLIPPAGE_PERCENT()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "UNISWAP_ROUTER()": FunctionFragment;
    "USD_ADDRESS()": FunctionFragment;
    "WETH_ADDRESS()": FunctionFragment;
    "getAmountsIn(uint256,address,address)": FunctionFragment;
    "getAmountsOut(uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FLASHLOAN_PREMIUM_TOTAL"
      | "MAX_SLIPPAGE_PERCENT"
      | "ORACLE"
      | "UNISWAP_ROUTER"
      | "USD_ADDRESS"
      | "WETH_ADDRESS"
      | "getAmountsIn"
      | "getAmountsOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FLASHLOAN_PREMIUM_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SLIPPAGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "FLASHLOAN_PREMIUM_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SLIPPAGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;

  events: {
    "Swapped(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export interface SwappedEventObject {
  fromAsset: string;
  toAsset: string;
  fromAmount: BigNumber;
  receivedAmount: BigNumber;
}
export type SwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SwappedEventObject
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface IBaseUniswapAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBaseUniswapAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FLASHLOAN_PREMIUM_TOTAL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    MAX_SLIPPAGE_PERCENT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ORACLE(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    UNISWAP_ROUTER(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    USD_ADDRESS(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    WETH_ADDRESS(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string[]]>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string[]]>;
  };

  FLASHLOAN_PREMIUM_TOTAL(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  MAX_SLIPPAGE_PERCENT(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ORACLE(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  UNISWAP_ROUTER(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  USD_ADDRESS(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  WETH_ADDRESS(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountsIn(
    amountOut: PromiseOrValue<BigNumberish>,
    reserveIn: PromiseOrValue<string>,
    reserveOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string[]]>;

  getAmountsOut(
    amountIn: PromiseOrValue<BigNumberish>,
    reserveIn: PromiseOrValue<string>,
    reserveOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string[]]>;

  callStatic: {
    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    UNISWAP_ROUTER(overrides?: CallOverrides): Promise<string>;

    USD_ADDRESS(overrides?: CallOverrides): Promise<string>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string[]]>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, string[]]>;
  };

  filters: {
    "Swapped(address,address,uint256,uint256)"(
      fromAsset?: null,
      toAsset?: null,
      fromAmount?: null,
      receivedAmount?: null
    ): SwappedEventFilter;
    Swapped(
      fromAsset?: null,
      toAsset?: null,
      fromAmount?: null,
      receivedAmount?: null
    ): SwappedEventFilter;
  };

  estimateGas: {
    FLASHLOAN_PREMIUM_TOTAL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    MAX_SLIPPAGE_PERCENT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ORACLE(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    UNISWAP_ROUTER(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    USD_ADDRESS(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    WETH_ADDRESS(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FLASHLOAN_PREMIUM_TOTAL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    MAX_SLIPPAGE_PERCENT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ORACLE(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    UNISWAP_ROUTER(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    USD_ADDRESS(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    WETH_ADDRESS(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigNumberish>,
      reserveIn: PromiseOrValue<string>,
      reserveOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
