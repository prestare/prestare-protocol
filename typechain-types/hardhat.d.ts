/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BaseParaSwapAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseParaSwapAdapter__factory>;
    getContractFactory(
      name: "BaseParaSwapSellAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseParaSwapSellAdapter__factory>;
    getContractFactory(
      name: "BaseUniswapAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUniswapAdapter__factory>;
    getContractFactory(
      name: "FlashLiquidationAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLiquidationAdapter__factory>;
    getContractFactory(
      name: "IBaseUniswapAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseUniswapAdapter__factory>;
    getContractFactory(
      name: "ParaSwapLiquiditySwapAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParaSwapLiquiditySwapAdapter__factory>;
    getContractFactory(
      name: "UniswapLiquiditySwapAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapLiquiditySwapAdapter__factory>;
    getContractFactory(
      name: "UniswapRepayAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapRepayAdapter__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "CrtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrtToken__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "AdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "ATokensAndRatesHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokensAndRatesHelper__factory>;
    getContractFactory(
      name: "StableAndVariableTokensHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableAndVariableTokensHelper__factory>;
    getContractFactory(
      name: "FlashLoanReceiverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanReceiverBase__factory>;
    getContractFactory(
      name: "IFlashLoanReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanReceiver__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator__factory>;
    getContractFactory(
      name: "ICreditDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreditDelegationToken__factory>;
    getContractFactory(
      name: "IDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationToken__factory>;
    getContractFactory(
      name: "IERC20WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20WithPermit__factory>;
    getContractFactory(
      name: "IExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeAdapter__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "IInitializableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableDebtToken__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "ILendingPoolCollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolCollateralManager__factory>;
    getContractFactory(
      name: "ILendingPoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolConfigurator__factory>;
    getContractFactory(
      name: "ILendingRateOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingRateOracle__factory>;
    getContractFactory(
      name: "IParaSwapAugustus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParaSwapAugustus__factory>;
    getContractFactory(
      name: "IParaSwapAugustusRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParaSwapAugustusRegistry__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IPriceOracleGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleGetter__factory>;
    getContractFactory(
      name: "IReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableDebtToken__factory>;
    getContractFactory(
      name: "IUniswapExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapExchange__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVariableDebtToken__factory>;
    getContractFactory(
      name: "AaveOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveOracle__factory>;
    getContractFactory(
      name: "AaveProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveProtocolDataProvider__factory>;
    getContractFactory(
      name: "IAaveOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveOracle__factory>;
    getContractFactory(
      name: "IERC20DetailedBytes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20DetailedBytes__factory>;
    getContractFactory(
      name: "IUiIncentiveDataProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiIncentiveDataProviderV2__factory>;
    getContractFactory(
      name: "IUiIncentiveDataProviderV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiIncentiveDataProviderV3__factory>;
    getContractFactory(
      name: "IUiPoolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiPoolDataProvider__factory>;
    getContractFactory(
      name: "IUiPoolDataProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiPoolDataProviderV2__factory>;
    getContractFactory(
      name: "IUiPoolDataProviderV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiPoolDataProviderV3__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETHGateway__factory>;
    getContractFactory(
      name: "UiIncentiveDataProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiIncentiveDataProviderV2__factory>;
    getContractFactory(
      name: "UiIncentiveDataProviderV2V3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiIncentiveDataProviderV2V3__factory>;
    getContractFactory(
      name: "UiPoolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiPoolDataProvider__factory>;
    getContractFactory(
      name: "UiPoolDataProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiPoolDataProviderV2__factory>;
    getContractFactory(
      name: "UiPoolDataProviderV2V3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiPoolDataProviderV2V3__factory>;
    getContractFactory(
      name: "WalletBalanceProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletBalanceProvider__factory>;
    getContractFactory(
      name: "WETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETHGateway__factory>;
    getContractFactory(
      name: "SelfdestructTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfdestructTransfer__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "MockFlashLoanReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLoanReceiver__factory>;
    getContractFactory(
      name: "ChainlinkUSDETHOracleI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkUSDETHOracleI__factory>;
    getContractFactory(
      name: "MockAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAggregator__factory>;
    getContractFactory(
      name: "GenericOracleI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericOracleI__factory>;
    getContractFactory(
      name: "IExtendedPriceAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtendedPriceAggregator__factory>;
    getContractFactory(
      name: "LendingRateOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingRateOracle__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "MockParaSwapAugustus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockParaSwapAugustus__factory>;
    getContractFactory(
      name: "MockParaSwapAugustusRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockParaSwapAugustusRegistry__factory>;
    getContractFactory(
      name: "MockParaSwapTokenTransferProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockParaSwapTokenTransferProxy__factory>;
    getContractFactory(
      name: "MockUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUniswapV2Router02__factory>;
    getContractFactory(
      name: "MintableDelegationERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableDelegationERC20__factory>;
    getContractFactory(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC20__factory>;
    getContractFactory(
      name: "WETH9Mocked",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Mocked__factory>;
    getContractFactory(
      name: "MockAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAToken__factory>;
    getContractFactory(
      name: "MockStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStableDebtToken__factory>;
    getContractFactory(
      name: "MockVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVariableDebtToken__factory>;
    getContractFactory(
      name: "LendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "LendingPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "DefaultReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "LendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPool__factory>;
    getContractFactory(
      name: "LendingPoolCollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolCollateralManager__factory>;
    getContractFactory(
      name: "LendingPoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolConfigurator__factory>;
    getContractFactory(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "GenericLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericLogic__factory>;
    getContractFactory(
      name: "ReserveLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveLogic__factory>;
    getContractFactory(
      name: "ValidationLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidationLogic__factory>;
    getContractFactory(
      name: "AToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AToken__factory>;
    getContractFactory(
      name: "DebtTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtTokenBase__factory>;
    getContractFactory(
      name: "DelegationAwareAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationAwareAToken__factory>;
    getContractFactory(
      name: "IncentivizedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncentivizedERC20__factory>;
    getContractFactory(
      name: "StableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableDebtToken__factory>;
    getContractFactory(
      name: "VariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VariableDebtToken__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BaseParaSwapAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseParaSwapAdapter>;
    getContractAt(
      name: "BaseParaSwapSellAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseParaSwapSellAdapter>;
    getContractAt(
      name: "BaseUniswapAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUniswapAdapter>;
    getContractAt(
      name: "FlashLiquidationAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLiquidationAdapter>;
    getContractAt(
      name: "IBaseUniswapAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseUniswapAdapter>;
    getContractAt(
      name: "ParaSwapLiquiditySwapAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParaSwapLiquiditySwapAdapter>;
    getContractAt(
      name: "UniswapLiquiditySwapAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapLiquiditySwapAdapter>;
    getContractAt(
      name: "UniswapRepayAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapRepayAdapter>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "CrtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrtToken>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "AdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableUpgradeabilityProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "ATokensAndRatesHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokensAndRatesHelper>;
    getContractAt(
      name: "StableAndVariableTokensHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableAndVariableTokensHelper>;
    getContractAt(
      name: "FlashLoanReceiverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanReceiverBase>;
    getContractAt(
      name: "IFlashLoanReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanReceiver>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IChainlinkAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAggregator>;
    getContractAt(
      name: "ICreditDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreditDelegationToken>;
    getContractAt(
      name: "IDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationToken>;
    getContractAt(
      name: "IERC20WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20WithPermit>;
    getContractAt(
      name: "IExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeAdapter>;
    getContractAt(
      name: "IInitializableAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableAToken>;
    getContractAt(
      name: "IInitializableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableDebtToken>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "ILendingPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry>;
    getContractAt(
      name: "ILendingPoolCollateralManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolCollateralManager>;
    getContractAt(
      name: "ILendingPoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolConfigurator>;
    getContractAt(
      name: "ILendingRateOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingRateOracle>;
    getContractAt(
      name: "IParaSwapAugustus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IParaSwapAugustus>;
    getContractAt(
      name: "IParaSwapAugustusRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IParaSwapAugustusRegistry>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IPriceOracleGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleGetter>;
    getContractAt(
      name: "IReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReserveInterestRateStrategy>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "IStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableDebtToken>;
    getContractAt(
      name: "IUniswapExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapExchange>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVariableDebtToken>;
    getContractAt(
      name: "AaveOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveOracle>;
    getContractAt(
      name: "AaveProtocolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveProtocolDataProvider>;
    getContractAt(
      name: "IAaveOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveOracle>;
    getContractAt(
      name: "IERC20DetailedBytes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20DetailedBytes>;
    getContractAt(
      name: "IUiIncentiveDataProviderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiIncentiveDataProviderV2>;
    getContractAt(
      name: "IUiIncentiveDataProviderV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiIncentiveDataProviderV3>;
    getContractAt(
      name: "IUiPoolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiPoolDataProvider>;
    getContractAt(
      name: "IUiPoolDataProviderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiPoolDataProviderV2>;
    getContractAt(
      name: "IUiPoolDataProviderV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiPoolDataProviderV3>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETHGateway>;
    getContractAt(
      name: "UiIncentiveDataProviderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiIncentiveDataProviderV2>;
    getContractAt(
      name: "UiIncentiveDataProviderV2V3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiIncentiveDataProviderV2V3>;
    getContractAt(
      name: "UiPoolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiPoolDataProvider>;
    getContractAt(
      name: "UiPoolDataProviderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiPoolDataProviderV2>;
    getContractAt(
      name: "UiPoolDataProviderV2V3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiPoolDataProviderV2V3>;
    getContractAt(
      name: "WalletBalanceProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletBalanceProvider>;
    getContractAt(
      name: "WETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETHGateway>;
    getContractAt(
      name: "SelfdestructTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfdestructTransfer>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "MockFlashLoanReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFlashLoanReceiver>;
    getContractAt(
      name: "ChainlinkUSDETHOracleI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkUSDETHOracleI>;
    getContractAt(
      name: "MockAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAggregator>;
    getContractAt(
      name: "GenericOracleI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericOracleI>;
    getContractAt(
      name: "IExtendedPriceAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtendedPriceAggregator>;
    getContractAt(
      name: "LendingRateOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingRateOracle>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "MockParaSwapAugustus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockParaSwapAugustus>;
    getContractAt(
      name: "MockParaSwapAugustusRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockParaSwapAugustusRegistry>;
    getContractAt(
      name: "MockParaSwapTokenTransferProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockParaSwapTokenTransferProxy>;
    getContractAt(
      name: "MockUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUniswapV2Router02>;
    getContractAt(
      name: "MintableDelegationERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableDelegationERC20>;
    getContractAt(
      name: "MintableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC20>;
    getContractAt(
      name: "WETH9Mocked",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Mocked>;
    getContractAt(
      name: "MockAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAToken>;
    getContractAt(
      name: "MockStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStableDebtToken>;
    getContractAt(
      name: "MockVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVariableDebtToken>;
    getContractAt(
      name: "LendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolAddressesProvider>;
    getContractAt(
      name: "LendingPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolAddressesProviderRegistry>;
    getContractAt(
      name: "DefaultReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultReserveInterestRateStrategy>;
    getContractAt(
      name: "LendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPool>;
    getContractAt(
      name: "LendingPoolCollateralManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolCollateralManager>;
    getContractAt(
      name: "LendingPoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolConfigurator>;
    getContractAt(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "GenericLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericLogic>;
    getContractAt(
      name: "ReserveLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveLogic>;
    getContractAt(
      name: "ValidationLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidationLogic>;
    getContractAt(
      name: "AToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AToken>;
    getContractAt(
      name: "DebtTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtTokenBase>;
    getContractAt(
      name: "DelegationAwareAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationAwareAToken>;
    getContractAt(
      name: "IncentivizedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncentivizedERC20>;
    getContractAt(
      name: "StableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableDebtToken>;
    getContractAt(
      name: "VariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VariableDebtToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
